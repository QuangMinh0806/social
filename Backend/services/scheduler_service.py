"""
Scheduler Service - Qu·∫£n l√Ω ƒëƒÉng b√†i theo l·ªãch h·∫πn
S·ª≠ d·ª•ng APScheduler ƒë·ªÉ ki·ªÉm tra v√† t·ª± ƒë·ªông ƒëƒÉng c√°c post c√≥ tr·∫°ng th√°i 'scheduled'
"""

import sys
sys.path.append('..')

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select
from typing import List
import asyncio
import logging

from models.model import Post
from services.post_service import PostService
from services.storage_service import storage_service
from core.config import settings
from utils.timezone_utils import now_utc, format_datetime_gmt7, utc_to_gmt7

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SchedulerService:
    """Service qu·∫£n l√Ω scheduler cho scheduled posts"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.engine = None
        self.async_session = None
        
    async def init_db(self):
        """Kh·ªüi t·∫°o database connection cho scheduler"""
        try:
            self.engine = create_async_engine(
                settings.DATABASE_URL,
                echo=False,
                pool_pre_ping=True
            )
            self.async_session = sessionmaker(
                self.engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            logger.info("‚úÖ Scheduler database connection initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize scheduler database: {str(e)}")
            raise
    
    async def start(self):
        """Kh·ªüi ƒë·ªông scheduler"""
        try:
            # Init database connection
            await self.init_db()
            
            # Add job: ki·ªÉm tra scheduled posts m·ªói 1 ph√∫t
            self.scheduler.add_job(
                self.check_and_publish_scheduled_posts,
                trigger=IntervalTrigger(minutes=1),
                id='check_scheduled_posts',
                name='Check and publish scheduled posts',
                replace_existing=True
            )
            
            # Start scheduler
            self.scheduler.start()
            logger.info("üöÄ Scheduler started successfully - checking every 1 minute")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start scheduler: {str(e)}")
            raise
    
    async def shutdown(self):
        """T·∫Øt scheduler"""
        try:
            if self.scheduler.running:
                self.scheduler.shutdown(wait=True)
                logger.info("üõë Scheduler stopped")
                
            if self.engine:
                await self.engine.dispose()
                logger.info("üõë Scheduler database connection closed")
                
        except Exception as e:
            logger.error(f"‚ùå Error shutting down scheduler: {str(e)}")
    
    async def check_and_publish_scheduled_posts(self):
        """
        Ki·ªÉm tra v√† ƒëƒÉng c√°c posts c√≥:
        - status = 'scheduled'
        - scheduled_at <= now (UTC)
        """
        try:
            async with self.async_session() as session:
                # Query c√°c scheduled posts ƒë√£ ƒë·∫øn th·ªùi gian ƒëƒÉng (UTC)
                now = now_utc()
                query = (
                    select(Post)
                    .where(Post.status == 'scheduled')
                    .where(Post.scheduled_at != None)
                    .where(Post.scheduled_at <= now)
                )
                
                result = await session.execute(query)
                scheduled_posts = result.scalars().all()
                
                if not scheduled_posts:
                    # Format th·ªùi gian theo GMT+7 ƒë·ªÉ d·ªÖ ƒë·ªçc
                    logger.debug(f"‚è∞ [{format_datetime_gmt7(now)}] No scheduled posts to publish")
                    return
                
                logger.info(f"üì§ Found {len(scheduled_posts)} scheduled post(s) ready to publish")
                
                # ƒêƒÉng t·ª´ng post
                for post in scheduled_posts:
                    try:
                        await self._publish_scheduled_post(session, post)
                    except Exception as e:
                        logger.error(f"‚ùå Error publishing post {post.id}: {str(e)}")
                        # Update status to failed
                        post.status = 'failed'
                        post.error_message = str(e)
                        post.retry_count = post.retry_count + 1 if post.retry_count else 1
                        await session.commit()
                        
        except Exception as e:
            logger.error(f"‚ùå Error in check_and_publish_scheduled_posts: {str(e)}")
    
    async def _publish_scheduled_post(self, session: AsyncSession, post: Post):
        """
        ƒêƒÉng m·ªôt scheduled post l√™n platform
        
        Args:
            session: Database session
            post: Post object c·∫ßn ƒëƒÉng
        """
        try:
            # Format th·ªùi gian theo GMT+7
            scheduled_time_gmt7 = format_datetime_gmt7(post.scheduled_at)
            logger.info(f"üìù Publishing scheduled post {post.id} (scheduled at: {scheduled_time_gmt7})")
            
            # Update status sang 'publishing'
            post.status = 'publishing'
            await session.commit()
            
            # Load relationships (page, platform)
            await session.refresh(post, ['page', 'user'])
            if post.page:
                await session.refresh(post.page, ['platform'])
            
            # S·ª≠ d·ª•ng PostService ƒë·ªÉ ƒëƒÉng b√†i
            post_service = PostService(session)
            
            # Parse metadata ƒë·ªÉ l·∫•y media info
            media_files = []
            media_urls = []
            media_type = 'image'
            
            if post.post_metadata:
                # L·∫•y media URLs (cho Instagram/Threads)
                media_urls = post.post_metadata.get('media_urls', [])
                media_type = post.post_metadata.get('media_type', 'image')
                
                # Load media files t·ª´ storage (cho Facebook/TikTok/YouTube)
                media_paths = post.post_metadata.get('media_paths', [])
                if media_paths:
                    try:
                        media_files = await storage_service.load_media_for_post(
                            post_id=post.id,
                            media_paths=media_paths
                        )
                        logger.info(f"üìÅ Loaded {len(media_files)} media file(s) from storage")
                    except Exception as e:
                        logger.error(f"‚ùå Error loading media files: {str(e)}")
            
            # ƒêƒÉng l√™n platform
            await post_service._publish_to_platform(
                post=post,
                media_files=media_files,
                media_type=media_type,
                media_urls=media_urls
            )
            
            # Cleanup: X√≥a media files sau khi ƒëƒÉng th√†nh c√¥ng
            if post.post_metadata and post.post_metadata.get('media_paths'):
                try:
                    await storage_service.delete_media_for_post(post.id)
                    logger.info(f"üóëÔ∏è Cleaned up media files for post {post.id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Could not cleanup media files: {str(e)}")
            
            logger.info(f"‚úÖ Successfully published scheduled post {post.id}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to publish scheduled post {post.id}: {str(e)}")
            raise
    
    async def get_upcoming_scheduled_posts(self, limit: int = 10) -> List[dict]:
        """
        L·∫•y danh s√°ch c√°c scheduled posts s·∫Øp t·ªõi
        
        Args:
            limit: S·ªë l∆∞·ª£ng posts c·∫ßn l·∫•y
            
        Returns:
            List c√°c scheduled posts v·ªõi th√¥ng tin c∆° b·∫£n (th·ªùi gian GMT+7)
        """
        try:
            async with self.async_session() as session:
                now = now_utc()
                query = (
                    select(Post)
                    .where(Post.status == 'scheduled')
                    .where(Post.scheduled_at != None)
                    .where(Post.scheduled_at > now)
                    .order_by(Post.scheduled_at.asc())
                    .limit(limit)
                )
                
                result = await session.execute(query)
                posts = result.scalars().all()
                
                return [
                    {
                        'id': post.id,
                        'content': post.content[:100] + '...' if len(post.content) > 100 else post.content,
                        'scheduled_at': format_datetime_gmt7(post.scheduled_at, "%Y-%m-%d %H:%M:%S"),  # GMT+7
                        'scheduled_at_utc': post.scheduled_at.isoformat(),  # UTC cho client x·ª≠ l√Ω
                        'page_id': post.page_id,
                        'user_id': post.user_id,
                        'post_type': post.post_type.value if hasattr(post.post_type, 'value') else post.post_type
                    }
                    for post in posts
                ]
                
        except Exception as e:
            logger.error(f"‚ùå Error getting upcoming scheduled posts: {str(e)}")
            return []
    
    async def trigger_scheduled_post_now(self, post_id: int):
        """
        Trigger ƒëƒÉng m·ªôt scheduled post ngay l·∫≠p t·ª©c (kh√¥ng ch·ªù scheduled_at)
        
        Args:
            post_id: ID c·ªßa post c·∫ßn ƒëƒÉng
            
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            async with self.async_session() as session:
                # Get post
                query = select(Post).where(Post.id == post_id)
                result = await session.execute(query)
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"‚ùå Post {post_id} not found")
                    return False
                
                if post.status != 'scheduled':
                    logger.error(f"‚ùå Post {post_id} is not in scheduled status (current: {post.status})")
                    return False
                
                # Publish immediately
                await self._publish_scheduled_post(session, post)
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error triggering scheduled post {post_id}: {str(e)}")
            return False


# Global scheduler instance
scheduler_service = SchedulerService()


async def start_scheduler():
    """Helper function to start scheduler"""
    await scheduler_service.start()


async def stop_scheduler():
    """Helper function to stop scheduler"""
    await scheduler_service.shutdown()
