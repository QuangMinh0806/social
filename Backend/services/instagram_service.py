"""
Instagram Graph API Service
H·ªó tr·ª£ ƒëƒÉng b√†i l√™n Instagram Business Account th√¥ng qua Facebook Graph API

Instagram Content Publishing API c√≥ 2 b∆∞·ªõc:
1. Create Media Container (upload media v√† caption)
2. Publish Media Container (xu·∫•t b·∫£n l√™n Instagram)

Documentation:
- https://developers.facebook.com/docs/instagram-api/guides/content-publishing
- https://developers.facebook.com/docs/instagram-api/reference/ig-user/media
"""

import requests
from typing import List, Dict, Optional


async def post_to_instagram(
    instagram_business_account_id: str,
    access_token: str,
    caption: str,
    media_files: List[bytes] = None,
    media_type: str = "image",
    media_url: str = None
):
    """
    ƒêƒÉng b√†i l√™n Instagram Business Account
    
    Args:
        instagram_business_account_id: ID c·ªßa Instagram Business Account
        access_token: Page Access Token (c√≥ quy·ªÅn instagram_basic, instagram_content_publish)
        caption: Caption cho b√†i ƒëƒÉng
        media_files: List file data (bytes) - t√πy ch·ªçn
        media_type: Lo·∫°i media ('image', 'video', 'carousel')
        media_url: URL c√¥ng khai c·ªßa media (string cho single, list cho carousel)
    
    Returns:
        dict: Response t·ª´ Instagram API
    
    Note:
        Instagram API y√™u c·∫ßu media ph·∫£i c√≥ URL c√¥ng khai (HTTPS)
        Kh√¥ng h·ªó tr·ª£ upload file tr·ª±c ti·∫øp nh∆∞ Facebook
        C·∫ßn upload l√™n server tr∆∞·ªõc, sau ƒë√≥ truy·ªÅn URL v√†o API
    """
    
    # Instagram ch·ªâ ch·∫•p nh·∫≠n URL, kh√¥ng ch·∫•p nh·∫≠n file upload tr·ª±c ti·∫øp
    if not media_url:
        return {
            "success": False,
            "error": {
                "message": "Instagram API requires a public HTTPS URL for media. Please upload the file to a server first."
            }
        }
    
    # Handle carousel (media_url is a list)
    if isinstance(media_url, list):
        return await post_carousel_to_instagram(
            instagram_business_account_id,
            access_token,
            caption,
            media_url
        )
    
    if media_type == "image":
        return await post_single_image_to_instagram(
            instagram_business_account_id,
            access_token,
            caption,
            media_url
        )
    elif media_type == "video":
        return await post_video_to_instagram(
            instagram_business_account_id,
            access_token,
            caption,
            media_url
        )
    elif media_type == "carousel":
        return await post_carousel_to_instagram(
            instagram_business_account_id,
            access_token,
            caption,
            media_url  # Expect this to be a list of URLs
        )
    else:
        return {
            "success": False,
            "error": {
                "message": f"Unsupported media type: {media_type}"
            }
        }


async def post_single_image_to_instagram(
    instagram_business_account_id: str,
    access_token: str,
    caption: str,
    image_url: str
):
    """
    ƒêƒÉng m·ªôt ·∫£nh l√™n Instagram
    
    Step 1: Create IG Container
    POST https://graph.facebook.com/v21.0/{ig-user-id}/media
    
    Step 2: Publish IG Container
    POST https://graph.facebook.com/v21.0/{ig-user-id}/media_publish
    """
    
    # Step 1: Create container (ƒêƒÉng IG B1)
    create_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media"
    create_data = {
        "caption": caption,
        "image_url": image_url,
        "access_token": access_token
    }
    
    print(f"üîÑ [Instagram B1] Creating media container...")
    create_response = requests.post(create_url, json=create_data)
    
    if create_response.status_code != 200:
        error_data = create_response.json()
        print(f"‚ùå [Instagram B1] Failed: {error_data}")
        return {
            "success": False,
            "error": error_data,
            "message": "Failed to create Instagram media container",
            "step": "create_container"
        }
    
    container_id = create_response.json().get("id")
    print(f"‚úÖ [Instagram B1] Container created: {container_id}")
    
    # Step 2: Publish container (ƒêƒÉng IG B2)
    publish_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media_publish"
    publish_data = {
        "creation_id": container_id,
        "access_token": access_token
    }
    
    print(f"üîÑ [Instagram B2] Publishing container {container_id}...")
    publish_response = requests.post(publish_url, json=publish_data)
    
    if publish_response.status_code == 200:
        result = publish_response.json()
        media_id = result.get("id")
        print(f"‚úÖ [Instagram B2] Published successfully: {media_id}")
        
        # Step 3: L·∫•y permalink t·ª´ media ID
        permalink = None
        try:
            media_info_url = f"https://graph.facebook.com/v21.0/{media_id}"
            media_info_params = {
                "fields": "permalink",
                "access_token": access_token
            }
            media_info_response = requests.get(media_info_url, params=media_info_params)
            if media_info_response.status_code == 200:
                permalink = media_info_response.json().get("permalink")
                print(f"üîó [Instagram] Permalink: {permalink}")
        except Exception as e:
            print(f"‚ö†Ô∏è [Instagram] Could not fetch permalink: {e}")
        
        return {
            "success": True,
            "post_id": media_id,
            "container_id": container_id,
            "permalink": permalink,
            "message": "Posted to Instagram successfully"
        }
    else:
        error_data = publish_response.json()
        print(f"‚ùå [Instagram B2] Failed: {error_data}")
        return {
            "success": False,
            "error": error_data,
            "message": "Failed to publish Instagram media",
            "step": "publish_container",
            "container_id": container_id
        }


async def post_video_to_instagram(
    instagram_business_account_id: str,
    access_token: str,
    caption: str,
    video_url: str
):
    """
    ƒêƒÉng video l√™n Instagram
    
    Note: Video ph·∫£i ƒë√°p ·ª©ng c√°c y√™u c·∫ßu:
    - Format: MP4 ho·∫∑c MOV
    - Aspect ratio: Between 4:5 and 16:9
    - Duration: 3-60 seconds (Feed), up to 15 minutes (IGTV)
    - Size: Max 100MB (Feed), Max 650MB (IGTV)
    """
    
    # Step 1: Create video container
    create_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media"
    create_params = {
        "media_type": "VIDEO",
        "video_url": video_url,
        "caption": caption,
        "access_token": access_token
    }
    
    create_response = requests.post(create_url, params=create_params)
    
    if create_response.status_code != 200:
        return {
            "success": False,
            "error": create_response.json(),
            "message": "Failed to create Instagram video container"
        }
    
    container_id = create_response.json().get("id")
    
    # Step 2: Check status (video processing takes time)
    # TODO: Implement polling to check status
    # GET https://graph.facebook.com/v21.0/{ig-container-id}?fields=status_code
    
    # Step 3: Publish when ready (status_code = FINISHED)
    publish_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media_publish"
    publish_params = {
        "creation_id": container_id,
        "access_token": access_token
    }
    
    publish_response = requests.post(publish_url, params=publish_params)
    
    if publish_response.status_code == 200:
        result = publish_response.json()
        return {
            "success": True,
            "post_id": result.get("id"),
            "container_id": container_id,
            "message": "Posted video to Instagram successfully"
        }
    else:
        return {
            "success": False,
            "error": publish_response.json(),
            "message": "Failed to publish Instagram video"
        }


async def get_instagram_business_account(page_id: str, access_token: str) -> Optional[str]:
    """
    L·∫•y Instagram Business Account ID t·ª´ Facebook Page
    
    Args:
        page_id: Facebook Page ID
        access_token: Page Access Token
    
    Returns:
        str: Instagram Business Account ID ho·∫∑c None
    """
    url = f"https://graph.facebook.com/v21.0/{page_id}"
    params = {
        "fields": "instagram_business_account",
        "access_token": access_token
    }
    
    response = requests.get(url, params=params)
    
    if response.status_code == 200:
        data = response.json()
        ig_account = data.get("instagram_business_account", {})
        return ig_account.get("id")
    else:
        return None


async def post_carousel_to_instagram(
    instagram_business_account_id: str,
    access_token: str,
    caption: str,
    media_urls: List[str]
):
    """
    ƒêƒÉng carousel (nhi·ªÅu ·∫£nh/video) l√™n Instagram
    
    Instagram Carousel c√≥ th·ªÉ ch·ª©a 2-10 items (·∫£nh ho·∫∑c video)
    
    Flow:
    1. T·∫°o container cho t·ª´ng item (kh√¥ng c√≥ caption)
    2. T·∫°o carousel container v·ªõi list item containers v√† caption
    3. Publish carousel container
    
    Args:
        instagram_business_account_id: ID c·ªßa Instagram Business Account
        access_token: Page Access Token
        caption: Caption cho carousel
        media_urls: List URLs c·ªßa ·∫£nh/video (2-10 items)
    
    Returns:
        dict: Response t·ª´ Instagram API
    
    Documentation:
        https://developers.facebook.com/docs/instagram-api/guides/content-publishing#carousel-posts
    """
    
    if not media_urls or len(media_urls) < 2:
        return {
            "success": False,
            "error": {
                "message": "Carousel requires at least 2 media items"
            },
            "step": "validation"
        }
    
    if len(media_urls) > 10:
        return {
            "success": False,
            "error": {
                "message": "Carousel supports maximum 10 media items"
            },
            "step": "validation"
        }
    
    try:
        # Step 1: Create container cho t·ª´ng item
        item_container_ids = []
        
        for idx, media_url in enumerate(media_urls):
            print(f"üîÑ [Instagram Carousel] Creating item container {idx + 1}/{len(media_urls)}")
            
            # Detect media type t·ª´ URL (image or video)
            is_video = media_url.lower().endswith(('.mp4', '.mov', '.avi'))
            
            create_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media"
            
            if is_video:
                create_data = {
                    "media_type": "VIDEO",
                    "video_url": media_url,
                    "is_carousel_item": True,
                    "access_token": access_token
                }
            else:
                create_data = {
                    "image_url": media_url,
                    "is_carousel_item": True,
                    "access_token": access_token
                }
            
            create_response = requests.post(create_url, json=create_data)
            
            if create_response.status_code != 200:
                error_data = create_response.json()
                print(f"‚ùå [Instagram Carousel] Failed to create item {idx + 1}: {error_data}")
                return {
                    "success": False,
                    "error": error_data,
                    "message": f"Failed to create carousel item {idx + 1}",
                    "step": "create_item_container",
                    "item_index": idx
                }
            
            container_id = create_response.json().get("id")
            item_container_ids.append(container_id)
            print(f"‚úÖ [Instagram Carousel] Item container {idx + 1} created: {container_id}")
        
        # Step 2: Create carousel container
        print(f"üîÑ [Instagram Carousel] Creating carousel container with {len(item_container_ids)} items")
        
        carousel_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media"
        carousel_data = {
            "media_type": "CAROUSEL",
            "caption": caption,
            "children": ",".join(item_container_ids),  # Comma-separated list
            "access_token": access_token
        }
        
        carousel_response = requests.post(carousel_url, json=carousel_data)
        
        if carousel_response.status_code != 200:
            error_data = carousel_response.json()
            print(f"‚ùå [Instagram Carousel] Failed to create carousel container: {error_data}")
            return {
                "success": False,
                "error": error_data,
                "message": "Failed to create carousel container",
                "step": "create_carousel_container",
                "item_containers": item_container_ids
            }
        
        carousel_container_id = carousel_response.json().get("id")
        print(f"‚úÖ [Instagram Carousel] Carousel container created: {carousel_container_id}")
        
        # Step 3: Publish carousel
        print(f"üîÑ [Instagram Carousel] Publishing carousel {carousel_container_id}")
        
        publish_url = f"https://graph.facebook.com/v21.0/{instagram_business_account_id}/media_publish"
        publish_data = {
            "creation_id": carousel_container_id,
            "access_token": access_token
        }
        
        publish_response = requests.post(publish_url, json=publish_data)
        
        if publish_response.status_code == 200:
            result = publish_response.json()
            media_id = result.get("id")
            print(f"‚úÖ [Instagram Carousel] Published successfully: {media_id}")
            
            # Get permalink
            permalink = None
            try:
                media_info_url = f"https://graph.facebook.com/v21.0/{media_id}"
                media_info_params = {
                    "fields": "permalink",
                    "access_token": access_token
                }
                media_info_response = requests.get(media_info_url, params=media_info_params)
                if media_info_response.status_code == 200:
                    permalink = media_info_response.json().get("permalink")
                    print(f"üîó [Instagram Carousel] Permalink: {permalink}")
            except Exception as e:
                print(f"‚ö†Ô∏è [Instagram Carousel] Could not fetch permalink: {e}")
            
            return {
                "success": True,
                "post_id": media_id,
                "container_id": carousel_container_id,
                "item_containers": item_container_ids,
                "item_count": len(item_container_ids),
                "permalink": permalink,
                "message": f"Posted carousel with {len(item_container_ids)} items to Instagram successfully"
            }
        else:
            error_data = publish_response.json()
            print(f"‚ùå [Instagram Carousel] Failed to publish: {error_data}")
            return {
                "success": False,
                "error": error_data,
                "message": "Failed to publish Instagram carousel",
                "step": "publish_carousel",
                "container_id": carousel_container_id,
                "item_containers": item_container_ids
            }
    
    except Exception as e:
        print(f"‚ùå [Instagram Carousel] Exception: {str(e)}")
        return {
            "success": False,
            "error": {
                "message": str(e)
            },
            "step": "exception"
        }

